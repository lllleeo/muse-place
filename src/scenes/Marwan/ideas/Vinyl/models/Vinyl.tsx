/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { useBox } from "@react-three/cannon";
import { AudioAnalyser, Mesh } from "three";
import { useFrame } from "@react-three/fiber";
import { useLimiter } from "spacesvr";

type GLTFResult = GLTF & {
  nodes: {
    Amplifier: THREE.Mesh;
    Receiver: THREE.Mesh;
    Cassette: THREE.Mesh;
    Music_Cabinet: THREE.Mesh;
    Vinyl_Records: THREE.Mesh;
    Turntable: THREE.Mesh;
    Needle: THREE.Mesh;
    Speaker_01: THREE.Mesh;
    Speaker_02: THREE.Mesh;
    Speaker_01_Duplicate: THREE.Mesh;
  };
  materials: {
    ["M_Audio_02.004"]: THREE.MeshStandardMaterial;
    ["M_Audio_02.005"]: THREE.MeshStandardMaterial;
    ["M_Audio_01.005"]: THREE.MeshStandardMaterial;
    ["M_Coffeetable.002"]: THREE.MeshStandardMaterial;
    M_Audio_01: THREE.MeshStandardMaterial;
    ["M_Audio_01.006"]: THREE.MeshStandardMaterial;
    ["M_Audio_01.006"]: THREE.MeshStandardMaterial;
    ["M_Audio_01.007"]: THREE.MeshStandardMaterial;
    ["M_Audio_01.008"]: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/Vinyl-1626170688/vinyl_04.glb.gz";

export default function Model(
  props: { aa?: AudioAnalyser } & JSX.IntrinsicElements["group"]
) {
  const { aa } = props;
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;

  const keys = Object.keys(materials);
  for (const key of keys) {
    // @ts-ignore
    const mat = materials[key] as THREE.MeshStandardMaterial;
    mat.metalness = 0;
  }

  // values taken from outer file
  useBox(() => ({
    mass: 0,
    position: [-0.02 + 0.59, 0.18, 0 - 3.36],
    args: [1.85 * 0.9, 1.85 * 0.39, 1.85 * 0.26],
  }));

  const leftSpeaker = useRef<Mesh>();
  const rightSpeaker = useRef<Mesh>();
  const limiter = useLimiter(50);

  useFrame(({ clock }) => {
    if (
      !limiter.isReady(clock) ||
      !rightSpeaker.current ||
      !leftSpeaker.current ||
      !aa
    )
      return;

    const data = aa.getFrequencyData();
    const lScale = 0.9 + (data[3] / 255) * 0.4;
    leftSpeaker.current?.scale.set(lScale, lScale, lScale);

    const rScale = 0.9 + (data[32] / 255) * 0.4;
    rightSpeaker.current?.scale.set(rScale, rScale, rScale);
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene" scale={1.85}>
        {/*<mesh position={[-0.02, -0.18, 0]}>*/}
        {/*  <boxBufferGeometry args={[0.9, 0.39, 0.26]} />*/}
        {/*  <meshStandardMaterial color="red" />*/}
        {/*</mesh>*/}
        <mesh
          name="Amplifier"
          geometry={nodes.Amplifier.geometry}
          material={materials["M_Audio_02.004"]}
          scale={[0.3181, 0.3181, 0.3181]}
        />
        <mesh
          name="Receiver"
          geometry={nodes.Receiver.geometry}
          material={materials["M_Audio_02.005"]}
          scale={[0.3181, 0.3181, 0.3181]}
        />
        <mesh
          name="Cassette"
          geometry={nodes.Cassette.geometry}
          material={materials["M_Audio_01.005"]}
          scale={[0.3181, 0.3181, 0.3181]}
        />
        <mesh
          name="Music_Cabinet"
          geometry={nodes.Music_Cabinet.geometry}
          material={materials["M_Coffeetable.002"]}
          scale={[0.3181, 0.3181, 0.3181]}
        />
        <mesh
          name="Vinyl_Records"
          geometry={nodes.Vinyl_Records.geometry}
          material={materials.M_Audio_01}
          scale={[0.3181, 0.3181, 0.3181]}
        />
        <mesh
          name="Turntable"
          geometry={nodes.Turntable.geometry}
          material={nodes.Turntable.material}
          scale={[0.3181, 0.3181, 0.3181]}
        >
          <mesh
            name="Needle"
            geometry={nodes.Needle.geometry}
            material={nodes.Needle.material}
          />
        </mesh>
        <mesh
          ref={leftSpeaker}
          name="Speaker_01"
          geometry={nodes.Speaker_01.geometry}
          material={nodes.Speaker_01.material}
          position={[-0.4069, 0, 0.0297]}
          rotation={[0, -0.3626, 0]}
        />
        <mesh
          name="Speaker_02"
          geometry={nodes.Speaker_02.geometry}
          material={materials["M_Audio_01.008"]}
          scale={0.3181 * 1.4}
          position={[0.06, -0.11, 0]}
        />
        <mesh
          ref={rightSpeaker}
          name="Speaker_01_Duplicate"
          geometry={nodes.Speaker_01_Duplicate.geometry}
          material={nodes.Speaker_01_Duplicate.material}
          position={[0.3649, 0, 0.1042]}
          rotation={[0, 0.4554, 0]}
        />
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL);
