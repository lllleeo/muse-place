/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, useState, useEffect } from "react";
import { useFrame } from "react-three-fiber";
import { useGLTF } from "@react-three/drei";
import { useAnimations } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { useTrimeshCollision } from "spacesvr";
import { BufferGeometry } from "three";

type GLTFResult = GLTF & {
  nodes: {
    wallsa: THREE.Mesh;
    wallsb: THREE.Mesh;
    supports: THREE.Mesh;
    floor: THREE.Mesh;
    balcony: THREE.Mesh;
    balconysupport: THREE.Mesh;
    balconyrailing: THREE.Mesh;
    windows: THREE.Mesh;
    table: THREE.Mesh;
    stairs: THREE.Mesh;
    railing: THREE.Mesh;
    doors: THREE.Mesh;
    couch: THREE.Mesh;
    misc: THREE.Mesh;
    fans: THREE.Mesh;
    trophy: THREE.Mesh;
    stilts: THREE.Mesh;
    terrain: THREE.Mesh;
    collider: THREE.Mesh;
  };
  materials: {
    ["walls.a.mat"]: THREE.MeshStandardMaterial;
    ["walls.b.mat"]: THREE.MeshStandardMaterial;
    ["supports.mat"]: THREE.MeshStandardMaterial;
    ["floor.mat"]: THREE.MeshStandardMaterial;
    ["balcony.mat"]: THREE.MeshStandardMaterial;
    ["balcony.support.mat"]: THREE.MeshStandardMaterial;
    ["balcony.railing.mat"]: THREE.MeshStandardMaterial;
    ["windows.mat"]: THREE.MeshStandardMaterial;
    ["table.mat"]: THREE.MeshStandardMaterial;
    ["stairs.mat"]: THREE.MeshStandardMaterial;
    ["railing.mat"]: THREE.MeshStandardMaterial;
    ["doors.mat"]: THREE.MeshStandardMaterial;
    ["couch.mat"]: THREE.MeshStandardMaterial;
    ["misc.mat"]: THREE.MeshStandardMaterial;
    ["fans.mat"]: THREE.MeshStandardMaterial;
    ["trophy.mat"]: THREE.MeshStandardMaterial;
    ["stilts.mat"]: THREE.MeshStandardMaterial;
    ["terrain.mat"]: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/Musehq-1618637429/scene.glb.gz";

type ActionName = "animation_0";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(FILE_URL) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  useTrimeshCollision(
    (nodes.collider.geometry as BufferGeometry).clone().scale(3, 3, 3)
  );

  useEffect(() => {
    actions["animation_0"].play();
  }, []);

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      name="musehq"
      scale={[3, 3, 3]}
    >
      <group position-y={0}>
        <mesh
          name="wallsa"
          material={materials["walls.a.mat"]}
          geometry={nodes.wallsa.geometry}
        />
        <mesh
          name="wallsb"
          material={materials["walls.b.mat"]}
          geometry={nodes.wallsb.geometry}
        />
        <mesh
          name="supports"
          material={materials["supports.mat"]}
          geometry={nodes.supports.geometry}
        />
        <mesh
          name="floor"
          material={materials["floor.mat"]}
          geometry={nodes.floor.geometry}
        />
        <mesh
          name="balcony"
          material={materials["balcony.mat"]}
          geometry={nodes.balcony.geometry}
        />
        <mesh
          name="balconysupport"
          material={materials["balcony.support.mat"]}
          geometry={nodes.balconysupport.geometry}
        />
        <mesh
          name="balconyrailing"
          material={materials["balcony.railing.mat"]}
          geometry={nodes.balconyrailing.geometry}
        />
        <mesh
          name="windows"
          material={materials["windows.mat"]}
          geometry={nodes.windows.geometry}
        />
        <mesh
          name="table"
          material={materials["table.mat"]}
          geometry={nodes.table.geometry}
        />
        <mesh
          name="stairs"
          material={materials["stairs.mat"]}
          geometry={nodes.stairs.geometry}
        />
        <mesh
          name="railing"
          material={materials["railing.mat"]}
          geometry={nodes.railing.geometry}
        />
        <mesh
          name="doors"
          material={materials["doors.mat"]}
          geometry={nodes.doors.geometry}
        />
        <mesh
          name="couch"
          material={materials["couch.mat"]}
          geometry={nodes.couch.geometry}
        />
        <mesh
          name="misc"
          material={materials["misc.mat"]}
          geometry={nodes.misc.geometry}
        />
        <mesh
          name="fans"
          material={materials["fans.mat"]}
          geometry={nodes.fans.geometry}
          position={[2.3748, 3.2031, 2.3352]}
        />
        <mesh
          name="trophy"
          material={materials["trophy.mat"]}
          geometry={nodes.trophy.geometry}
        />
        <mesh
          name="stilts"
          material={materials["stilts.mat"]}
          geometry={nodes.stilts.geometry}
        />
        <mesh
          name="terrain"
          material={materials["terrain.mat"]}
          geometry={nodes.terrain.geometry}
        />
        {/*<mesh*/}
        {/*  name="collider"*/}
        {/*  material={nodes.collider.material}*/}
        {/*  geometry={nodes.collider.geometry}*/}
        {/*/>*/}
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL);
