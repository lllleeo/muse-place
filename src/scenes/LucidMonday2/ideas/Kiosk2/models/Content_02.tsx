/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { useTrimeshCollision } from "spacesvr";
import { BufferGeometry } from "three";

type GLTFResult = GLTF & {
  nodes: {
    content_02: THREE.Mesh;
  };
  materials: {
    ["content_02.mat"]: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/Kiosk2-1627638783/content_02.glb.gz";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;

  materials["content_02.mat"].emissive.set("white");

  useTrimeshCollision(
    (nodes.content_02.geometry as BufferGeometry)
      .clone()
      .scale(100, 100, 100)
      .translate(0, 0.1, 10.5)
      .rotateY(Math.PI / 3 - 0.9)
      .translate(0, 5, 0)
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <group>
        <mesh
          name="content_02"
          geometry={nodes.content_02.geometry}
          material={materials["content_02.mat"]}
          scale={[100, 100, 100]}
        />
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL);
