/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useMemo, useRef } from "react";
import { useGLTF } from "@react-three/drei";

import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { DRACO_URL, useTrimeshCollision } from "spacesvr";
import { BufferGeometry } from "three";
import { useLoader } from "react-three-fiber";
import { MeshStandardMaterial } from "three";

type GLTFResult = GLTF & {
  nodes: {
    building: THREE.Mesh;
    lattice: THREE.Mesh;
    windows: THREE.Mesh;
    glass: THREE.Mesh;
    barbershop: THREE.Mesh;
    trash: THREE.Mesh;
    white: THREE.Mesh;
    barberpole: THREE.Mesh;
    barbershopsign: THREE.Mesh;
    billboard: THREE.Mesh;
    overhang: THREE.Mesh;
    address: THREE.Mesh;
    open: THREE.Mesh;
    street: THREE.Mesh;
    sidewalk: THREE.Mesh;
    collider: THREE.Mesh;
  };
  materials: {
    ["lattice.mat"]: THREE.MeshStandardMaterial;
    ["windows.mat"]: THREE.MeshStandardMaterial;
    ["glass.mat"]: THREE.MeshStandardMaterial;
    ["barbershop.mat"]: THREE.MeshStandardMaterial;
    ["trash.mat"]: THREE.MeshStandardMaterial;
    ["white.mat"]: THREE.MeshStandardMaterial;
    ["barberpole.mat"]: THREE.MeshStandardMaterial;
    ["barbershopsign.mat"]: THREE.MeshStandardMaterial;
    ["billboard.mat"]: THREE.MeshStandardMaterial;
    ["overhang.mat"]: THREE.MeshStandardMaterial;
    ["address.1"]: THREE.MeshStandardMaterial;
    open: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/C2ASidewalk-1613822350/sidewalk_02.glb";

const TILE_TEX =
  "https://d27rt3a60hh1lx.cloudfront.net/content/c2a/white_tile.jpg";
const CONCRETE_TEX =
  "https://d27rt3a60hh1lx.cloudfront.net/content/c2a/concrete2.jpg";
const STREET_TEX =
  "https://d27rt3a60hh1lx.cloudfront.net/content/c2a/concrete1.jpg";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL, DRACO_URL) as GLTFResult;

  useTrimeshCollision(
    (nodes.collider.geometry as BufferGeometry).clone().scale(0.35, 0.35, 0.35)
  );

  // whtie tile texture
  const tileTex = useLoader(THREE.TextureLoader, TILE_TEX);
  tileTex.repeat.x = tileTex.repeat.y = 16;
  tileTex.wrapS = tileTex.wrapT = THREE.RepeatWrapping;
  const tileMat = useMemo(() => new MeshStandardMaterial({ map: tileTex }), [
    tileTex,
  ]);

  // sidewalk texture
  const concreteTex = useLoader(THREE.TextureLoader, CONCRETE_TEX);
  concreteTex.repeat.x = concreteTex.repeat.y = 90;
  concreteTex.wrapS = concreteTex.wrapT = THREE.RepeatWrapping;
  const concreteMat = useMemo(
    () => new MeshStandardMaterial({ map: concreteTex }),
    [concreteTex]
  );

  // sidewalk texture
  const streetTex = useLoader(THREE.TextureLoader, STREET_TEX);
  streetTex.repeat.x = streetTex.repeat.y = 40;
  streetTex.wrapS = streetTex.wrapT = THREE.RepeatWrapping;
  const streetMat = useMemo(
    () => new MeshStandardMaterial({ map: streetTex }),
    [streetTex]
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <group scale={[0.35, 0.35, 0.35]}>
        <mesh
          name="building"
          material={tileMat}
          geometry={nodes.building.geometry}
        />
        <mesh
          name="lattice"
          material={materials["lattice.mat"]}
          geometry={nodes.lattice.geometry}
          scale={[0.8432, -0.8432, 0.8432]}
        />
        <mesh
          name="windows"
          material={materials["windows.mat"]}
          geometry={nodes.windows.geometry}
          scale={[0.8432, -0.8432, 0.8432]}
        />
        <mesh
          name="glass"
          material={materials["glass.mat"]}
          geometry={nodes.glass.geometry}
        />
        <mesh
          name="barbershop"
          material={materials["barbershop.mat"]}
          geometry={nodes.barbershop.geometry}
        />
        <mesh
          name="trash"
          material={materials["trash.mat"]}
          geometry={nodes.trash.geometry}
        />
        <mesh
          name="white"
          material={materials["white.mat"]}
          geometry={nodes.white.geometry}
        />
        <mesh
          name="barberpole"
          material={materials["barberpole.mat"]}
          geometry={nodes.barberpole.geometry}
        />
        <mesh
          name="barbershopsign"
          material={materials["barbershopsign.mat"]}
          geometry={nodes.barbershopsign.geometry}
          rotation={[0, 0, 0]}
          scale={[1.166, 1.166, 1.166]}
        />
        <mesh
          name="billboard"
          material={materials["billboard.mat"]}
          geometry={nodes.billboard.geometry}
        />
        <mesh
          name="overhang"
          material={materials["overhang.mat"]}
          geometry={nodes.overhang.geometry}
        />
        <mesh
          name="address"
          material={materials["address.1"]}
          geometry={nodes.address.geometry}
          scale={[1.4571, 1.0129, 1.0125]}
        />
        <mesh
          name="open"
          material={materials.open}
          geometry={nodes.open.geometry}
          scale={[0.9187, 0.6387, 0.6384]}
        />
        <mesh
          name="street"
          material={streetMat}
          geometry={nodes.street.geometry}
          scale={[2.0335, 2.0335, 2.0335]}
        />
        <mesh
          name="sidewalk"
          material={concreteMat}
          geometry={nodes.sidewalk.geometry}
        />
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL, DRACO_URL);
