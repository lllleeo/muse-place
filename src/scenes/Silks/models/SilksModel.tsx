/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei/useGLTF";

import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { DRACO_URL, useTrimeshCollision } from "spacesvr";
import { BufferGeometry } from "three";

type GLTFResult = GLTF & {
  nodes: {
    rug: THREE.Mesh;
    speakers: THREE.Mesh;
    structure: THREE.Mesh;
    logoboxes: THREE.Mesh;
    glass: THREE.Mesh;
    lights: THREE.Mesh;
    walls: THREE.Mesh;
    floor: THREE.Mesh;
  };
  materials: {
    rug: THREE.MeshStandardMaterial;
    speakers: THREE.MeshStandardMaterial;
    structure: THREE.MeshStandardMaterial;
    logoboxes: THREE.MeshStandardMaterial;
    ["Mat.17"]: THREE.MeshStandardMaterial;
    lights: THREE.MeshStandardMaterial;
    walls: THREE.MeshStandardMaterial;
    floor: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/Silks-1612915993/Silks3.glb";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL, DRACO_URL) as GLTFResult;

  const fixMat = (mat: THREE.MeshStandardMaterial) => {
    mat.metalness = 1;
    mat.roughness = 0;
  };

  fixMat(materials["rug"]);
  fixMat(materials["speakers"]);
  fixMat(materials["structure"]);
  fixMat(materials["logoboxes"]);
  fixMat(materials["Mat.17"]);
  fixMat(materials["lights"]);
  fixMat(materials["walls"]);
  fixMat(materials["floor"]);

  useTrimeshCollision(
    (nodes.walls.geometry as BufferGeometry).clone().translate(-3.3, 0, -0.14)
  );

  useTrimeshCollision(
    (nodes.structure.geometry as BufferGeometry)
      .clone()
      .translate(-3.3, 0, -0.14)
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene" position={[-3.3, 0, -0.14]}>
        <mesh
          name="rug"
          material={materials.rug}
          geometry={nodes.rug.geometry}
        />
        <mesh
          name="speakers"
          material={materials.speakers}
          geometry={nodes.speakers.geometry}
        />
        <mesh
          name="structure"
          material={materials.structure}
          geometry={nodes.structure.geometry}
        />
        <mesh
          name="logoboxes"
          material={materials.logoboxes}
          geometry={nodes.logoboxes.geometry}
        />
        <mesh
          name="glass"
          material={materials["Mat.17"]}
          geometry={nodes.glass.geometry}
        />
        <mesh
          name="lights"
          material={materials.lights}
          geometry={nodes.lights.geometry}
        />
        <mesh
          name="walls"
          material={materials.walls}
          geometry={nodes.walls.geometry}
        />
        <mesh
          name="floor"
          material={materials.floor}
          geometry={nodes.floor.geometry}
        />
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL, DRACO_URL);
