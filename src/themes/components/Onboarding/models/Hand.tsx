/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { GroupProps, useFrame } from "@react-three/fiber";
import { useLimiter } from "spacesvr";
import { MathUtils } from "three";

type GLTFResult = GLTF & {
  nodes: {
    hand: THREE.Mesh;
  };
  materials: {
    ["hand.mat"]: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://dwvo2npct47gg.cloudfront.net/models/awge-space/Hand-1617731145/dummyhand_05.glb.gz";

export default function Model(props: GroupProps & { stage: number }) {
  const { stage, ...restProps } = props;

  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;

  const group = useRef<THREE.Group>();
  const parent = useRef<THREE.Group>();
  const limiter = useLimiter(50);
  const joystickEl = useRef<HTMLDivElement>();

  materials["hand.mat"].envMapIntensity = 0.1;

  useFrame(({ clock }) => {
    if (
      !joystickEl.current ||
      !group.current ||
      !parent.current ||
      !limiter.isReady(clock)
    )
      return;

    if (stage === 1) {
      const tx = 5 * Math.sin(clock.getElapsedTime() * 2);
      const ty = 5 * Math.cos(clock.getElapsedTime() * 2);

      group.current.position.x = MathUtils.lerp(
        group.current.position.x,
        tx,
        0.1
      );
      group.current.position.y = MathUtils.lerp(
        group.current.position.y,
        ty,
        0.1
      );
    }

    if (stage === 2) {
      const amount = 0.02;
      const top = parseInt(joystickEl.current.style.top.replace("px", ""));
      const left =
        -1 * parseInt(joystickEl.current.style.left.replace("px", ""));

      const tx = -left * amount;
      const ty = 5.7;
      const tz = top * amount;
      const ry = Math.PI;

      group.current.position.x = MathUtils.lerp(
        group.current.position.x,
        tx,
        1
      );
      group.current.position.y = MathUtils.lerp(
        group.current.position.y,
        ty,
        0.1
      );
      group.current.position.z = MathUtils.lerp(
        group.current.position.z,
        tz,
        1
      );
      group.current.rotation.y = MathUtils.lerp(
        group.current.rotation.y,
        ry,
        0.1
      );
    }

    if (stage === 3) {
      const tx = 4;
      const ty = 10;
      const rx = -Math.PI / 2;
      const ry = 0;
      const rz = Math.PI * 0.1 * Math.sin(clock.getElapsedTime() * 3) + 0.3;

      group.current.position.x = MathUtils.lerp(
        group.current.position.x,
        tx,
        1
      );
      group.current.position.y = MathUtils.lerp(
        group.current.position.y,
        ty,
        0.1
      );
      group.current.position.x = MathUtils.lerp(
        group.current.position.x,
        tx,
        0.1
      );
      group.current.position.y = MathUtils.lerp(
        group.current.position.y,
        ty,
        0.1
      );
      group.current.rotation.x = MathUtils.lerp(
        group.current.rotation.x,
        rx,
        0.75
      );
      group.current.rotation.y = MathUtils.lerp(
        group.current.rotation.y,
        ry,
        0.75
      );

      parent.current.rotation.z = MathUtils.lerp(
        parent.current.rotation.z,
        rz,
        0.75
      );

      parent.current.position.y = MathUtils.lerp(
        parent.current.position.y,
        -ry,
        0.75
      );
    }
  });

  useEffect(() => {
    const el = document.getElementsByClassName("nipple")[0];
    joystickEl.current = el.children[1] as HTMLDivElement;
  }, []);

  return (
    <group {...restProps} dispose={null}>
      <group ref={parent}>
        <group ref={group}>
          <group name="Scene" scale={[120, 120, 120]}>
            <mesh
              name="hand"
              geometry={nodes.hand.geometry}
              material={materials["hand.mat"]}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL);
