/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";

import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { DRACO_URL, useTrimeshCollision } from "spacesvr";
import { BufferGeometry, Color } from "three";

type GLTFResult = GLTF & {
  nodes: {
    structure: THREE.Mesh;
    middleSupports: THREE.Mesh;
    collider: THREE.Mesh;
    colliderNoSupports: THREE.Mesh;
  };
  materials: {
    structure: THREE.MeshStandardMaterial;
    middleSupports: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/Structure-1615316545/structure_09.glb";

export default function Model(
  props: JSX.IntrinsicElements["group"] & {
    night?: boolean;
  }
) {
  const { night, ...restProps } = props;

  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL, DRACO_URL) as GLTFResult;

  if (night) {
    materials["structure"].emissive = new Color("#292929");
    materials["middleSupports"].emissive = new Color("#292929");
  } else {
    materials["structure"].emissive = new Color("#ffffff");
    materials["middleSupports"].emissive = new Color("#ffffff");
  }

  useTrimeshCollision(
    (nodes.collider.geometry as BufferGeometry)
      .clone()
      .scale(5, 5, 5)
      .translate(-1.505, 0, 3.96)
  );

  return (
    <group ref={group} {...restProps} dispose={null}>
      <group scale={[5, 5, 5]} position={[-1.505, 0, 3.96]}>
        <mesh
          name="structure"
          material={materials.structure}
          geometry={nodes.structure.geometry}
        />
        <mesh
          name="middleSupports"
          material={materials.middleSupports}
          geometry={nodes.middleSupports.geometry}
        />
        {/*<mesh*/}
        {/*  name="collider"*/}
        {/*  material={nodes.collider.material}*/}
        {/*  geometry={nodes.collider.geometry}*/}
        {/*/>*/}
        {/*<mesh*/}
        {/*  name="colliderNoSupports"*/}
        {/*  material={nodes.colliderNoSupports.material}*/}
        {/*  geometry={nodes.colliderNoSupports.geometry}*/}
        {/*/>*/}
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL, DRACO_URL);
