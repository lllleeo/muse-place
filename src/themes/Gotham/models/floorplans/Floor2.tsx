/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { BufferGeometry, Color } from "three";
import { useTrimeshCollision } from "spacesvr";

type GLTFResult = GLTF & {
  nodes: {
    collider: THREE.Mesh;
    center2: THREE.Mesh;
    frame1: THREE.Mesh;
    frame2: THREE.Mesh;
    center1: THREE.Mesh;
    center3: THREE.Mesh;
    frame3: THREE.Mesh;
    frame4: THREE.Mesh;
    structure: THREE.Mesh;
  };
  materials: {
    ["center2.mat"]: THREE.MeshStandardMaterial;
    ["frame1.mat"]: THREE.MeshStandardMaterial;
    ["frame2.mat"]: THREE.MeshStandardMaterial;
    ["center1.mat"]: THREE.MeshStandardMaterial;
    ["frame3.mat"]: THREE.MeshStandardMaterial;
    ["frame4.mat"]: THREE.MeshStandardMaterial;
    ["structure.mat"]: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/floor2-1622879094/floor2.glb.gz";

export default function Model(
  props: { night?: boolean } & JSX.IntrinsicElements["group"]
) {
  const { night, ...restProps } = props;

  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;

  if (night) {
    materials["structure.mat"].emissive = new Color("#292929");
    // materials["middleSupports"].emissive = new Color("#292929");
  } else {
    materials["structure.mat"].emissive = new Color("#ffffff");
    // materials["middleSupports"].emissive = new Color("#ffffff");
  }

  useTrimeshCollision(
    (nodes.structure.geometry as BufferGeometry)
      .clone()
      .scale(1, 1, 1)
      .translate(-1.505, 0, 3.96)
  );

  return (
    <group ref={group} {...restProps} dispose={null}>
      <group scale={1} position={[-1.505, 0, 3.96]} name="Scene">
        <group name="gotham_kitesglb">
          <mesh
            name="center2"
            geometry={nodes.center2.geometry}
            material={materials["center2.mat"]}
          />
          {/*<mesh name="frame1" geometry={nodes.frame1.geometry} material={materials['frame1.mat']} />*/}
          {/*<mesh name="frame2" geometry={nodes.frame2.geometry} material={materials['frame2.mat']} />*/}
          <mesh
            name="center1"
            geometry={nodes.center1.geometry}
            material={nodes.center1.material}
          />
          <mesh
            name="center3"
            geometry={nodes.center3.geometry}
            material={nodes.center3.material}
          />
          {/*<mesh name="frame3" geometry={nodes.frame3.geometry} material={materials['frame3.mat']} />*/}
          {/*<mesh name="frame4" geometry={nodes.frame4.geometry} material={materials['frame4.mat']} />*/}
          <mesh
            name="structure"
            geometry={nodes.structure.geometry}
            material={materials["structure.mat"]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL);
