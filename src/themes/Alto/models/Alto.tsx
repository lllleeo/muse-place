/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei/useGLTF";

import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { DRACO_URL, useTrimeshCollision } from "spacesvr";
import { BufferGeometry } from "three";

type GLTFResult = GLTF & {
  nodes: {
    gods: THREE.Mesh;
    terrain: THREE.Mesh;
    structure: THREE.Mesh;
    collider: THREE.Mesh;
  };
  materials: {
    gods: THREE.MeshStandardMaterial;
    terrain: THREE.MeshStandardMaterial;
    structure: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/Alto-1611218757/alto_07.glb";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL, DRACO_URL) as GLTFResult;

  useTrimeshCollision(
    (nodes.collider.geometry as BufferGeometry)
      .clone()
      .scale(12, 12, 12)
      .translate(0, -36.69, 0)
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <group position-y={-36.69}>
        <group scale={[12, 12, 12]}>
          <mesh
            name="gods"
            material={materials.gods}
            geometry={nodes.gods.geometry}
            rotation={[0, 0, 0]}
          />
          <mesh
            name="terrain"
            material={materials.terrain}
            geometry={nodes.terrain.geometry}
          />
          <mesh
            name="structure"
            material={materials.structure}
            geometry={nodes.structure.geometry}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL, DRACO_URL);
