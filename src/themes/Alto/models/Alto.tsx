/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";

import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { useTrimeshCollision } from "spacesvr";
import { BufferGeometry } from "three";

type GLTFResult = GLTF & {
  nodes: {
    structure: THREE.Mesh;
    gods: THREE.Mesh;
    stairs: THREE.Mesh;
    stairs_2: THREE.Mesh;
    information: THREE.Mesh;
    spawn: THREE.Mesh;
    terrain: THREE.Mesh;
    collider: THREE.Mesh;
  };
  materials: {
    ["structure.mat"]: THREE.MeshStandardMaterial;
    ["gods.mat"]: THREE.MeshStandardMaterial;
    ["stairs.mat"]: THREE.MeshStandardMaterial;
    ["stairs_2.mat"]: THREE.MeshStandardMaterial;
    ["information.mat"]: THREE.MeshStandardMaterial;
    ["spawn.mat"]: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/alto-1618485350/alto.glb.gz";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;

  useTrimeshCollision(
    (nodes.collider.geometry as BufferGeometry)
      .clone()
      .scale(12, 12, 12)
      .translate(0, -36.69, 0)
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <group position-y={-36.69}>
        <group scale={[12, 12, 12]}>
          <group>
            <mesh
              name="structure"
              material={materials["structure.mat"]}
              geometry={nodes.structure.geometry}
            />
            <mesh
              name="gods"
              material={materials["gods.mat"]}
              geometry={nodes.gods.geometry}
              rotation={[0, 0, 0]}
            />
            <mesh
              name="stairs"
              material={materials["stairs.mat"]}
              geometry={nodes.stairs.geometry}
            />
            <mesh
              name="stairs_2"
              material={materials["stairs_2.mat"]}
              geometry={nodes.stairs_2.geometry}
            />
            <mesh
              name="information"
              material={materials["information.mat"]}
              geometry={nodes.information.geometry}
            />
            <mesh
              name="spawn"
              material={materials["spawn.mat"]}
              geometry={nodes.spawn.geometry}
            />
            <mesh
              name="terrain"
              material={nodes.terrain.material}
              geometry={nodes.terrain.geometry}
            />
            {/*<mesh name="collider" material={nodes.collider.material} geometry={nodes.collider.geometry} />*/}
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL);
