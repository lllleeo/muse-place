/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { useSeason } from "scenes/Alto/ChadKnight/contexts/Seasons";
import { animated, useSpring } from "react-spring/three";
import { BufferGeometry, MeshBasicMaterial } from "three";
import { useFrame, useLoader } from "@react-three/fiber";
import { useLimiter, useTrimeshCollision } from "spacesvr";

type GLTFResult = GLTF & {
  nodes: {
    ["face-top"]: THREE.Mesh;
    ["face-bottom"]: THREE.Mesh;
    ["platonic-top"]: THREE.Mesh;
    ["platonic-bottom"]: THREE.Mesh;
    terrain: THREE.Mesh;
    collider: THREE.Mesh;
    kaskade: THREE.Mesh;
    information: THREE.Mesh;
  };
  materials: {
    ["kaskade.mat"]: THREE.MeshStandardMaterial;
    ["information.mat"]: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/chad07-1622230940/chad07.glb.gz";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const top = useRef<THREE.Group>();
  const { activeSeason } = useSeason();
  const { color } = useSpring({
    color:
      activeSeason === "Winter"
        ? "#ffffff"
        : activeSeason === "Spring"
        ? "#9bc087"
        : activeSeason === "Summer"
        ? "#008000"
        : "#C06F35",
    config: {
      mass: 1,
    },
  });
  const facesMat = new MeshBasicMaterial({ color: "white", wireframe: true });
  const colliderMat = new MeshBasicMaterial({ color: "blue", wireframe: true });

  const terrainTex = useLoader(
    THREE.TextureLoader,
    "https://d27rt3a60hh1lx.cloudfront.net/content/muse.place/chadknight/grasstex.jpg"
  );
  terrainTex.repeat.x = 100;
  terrainTex.repeat.y = 100;
  terrainTex.wrapS = terrainTex.wrapT = THREE.RepeatWrapping;

  const limiter = useLimiter(45);
  useFrame(({ clock }) => {
    if (!limiter.isReady(clock) || !top.current) return;
    top.current.rotation.y = clock.getElapsedTime() / 7;
  });

  useTrimeshCollision(
    (nodes.collider.geometry as BufferGeometry)
      .clone()
      .translate(0, -18, 0)
      .scale(5, 5, 5)
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene" scale={5}>
        <group name="chad_07glb" position-y={-18.5}>
          <group name="top" ref={top}>
            <mesh
              name="face-top"
              geometry={nodes["face-top"].geometry}
              material={facesMat}
            />
            <mesh
              name="platonic-top"
              geometry={nodes["platonic-top"].geometry}
              material={facesMat}
              scale={[1.5, 1.5, 1.5]}
            />
          </group>
          <mesh
            name="face-bottom"
            geometry={nodes["face-bottom"].geometry}
            material={facesMat}
          />
          <mesh
            name="platonic-bottom"
            geometry={nodes["platonic-bottom"].geometry}
            material={facesMat}
            scale={[1.5, 1.5, 1.5]}
          />
          <mesh name="terrain" geometry={nodes.terrain.geometry}>
            <animated.meshBasicMaterial color={color} map={terrainTex} />
          </mesh>
          <mesh
            name="kaskade"
            geometry={nodes.kaskade.geometry}
            material={materials["kaskade.mat"]}
          />
          <mesh
            name="information"
            geometry={nodes.information.geometry}
            material={materials["information.mat"]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL);
